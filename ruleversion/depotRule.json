{
    "title": "总仓库",
    "author": "Reborn",
    "version": 35,
    "updateText": "1.支持读取仓库中的自定义文件名，默认update.json\n2.修复更新提示",
    "rule": "rule:" 
}