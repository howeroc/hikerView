{
    "title": "ÊÄª‰ªìÂ∫ì",
    "author": "Reborn",
    "version": 35,
    "updateText": "1.‚Äò‚ÄòÈáçÁ£ÖÊñ∞ÂäüËÉΩ‚Äô‚Äô:ÊîØÊåÅÊêúÁ¥¢‰ªìÂ∫ìËßÑÂàô\n2.üôàÔ∏èÊäÄÁ©∑‰∫ÜÔºåËøôÂèØËÉΩÁúüÁöÑÊòØÊúÄÂêé‰∫ø‰∏™ÁâàÊú¨‰∫Ü\n3.Êõ¥Â§öÊõ¥Êñ∞Êó•ÂøóËØ∑ÁÇπÂáªËÆøÈóÆÊ∫êÁΩëÈ°µÊü•Áúã",
    "rule": "rule:" 
}