{
    "title": "总仓库",
    "author": "Reborn",
    "version": 29,
    "updateText": "1.‘‘优化’’:所有开关都移到最前面的settings对象啦!(方便大佬们自己定义开关)\n2.‘‘新功能’’:支持规则映射功能(即替换规则名跟仓库规则对比)\n3.更多更新日志请点击访问源网页查看",
    "rule": "rule:" 
}