{
    "title": "ÊÄª‰ªìÂ∫ì",
    "author": "Reborn",
    "version": 33,
    "updateText": "1.‚Äò‚Äò‰øÆÂ§ç‚Äô‚Äô:Ëá™ÂÆö‰πâÊñá‰ª∂ÂêçÂ§±ÊïàÁöÑÈóÆÈ¢ò\n2.üôàÔ∏èÊäÄÁ©∑‰∫ÜÔºåËøôÂèØËÉΩÁúüÁöÑÊòØÊúÄÂêé‰∫ø‰∏™ÁâàÊú¨‰∫Ü\n3.Êõ¥Â§öÊõ¥Êñ∞Êó•ÂøóËØ∑ÁÇπÂáªËÆøÈóÆÊ∫êÁΩëÈ°µÊü•Áúã",
    "rule": "rule:" 
}