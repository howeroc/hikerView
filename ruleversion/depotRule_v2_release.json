{
    "title": "总仓库",
    "author": "Reborn",
    "version": 27,
    "updateText": "1.‘‘优化’’:规则映射功能支持正则批量映射，模板在开发文档\n2.‘‘新功能’’:支持规则映射功能(即替换规则名跟仓库规则对比)\n3.更多更新日志请点击访问源网页查看",
    "rule": "rule:" 
}