{
    "title": "总仓库",
    "author": "Reborn",
    "version": 31,
    "updateText": "1.‘‘修复’’:规则映射无法生效的问题\n2.‘‘新功能’’:支持云端仓库配置\n3.更多更新日志请点击访问源网页查看",
    "rule": "rule://rule://5rW36ZiU6KeG55WM6KeE5YiZ5YiG5Lqr77yM5b2T5YmN5YiG5Lqr55qE5piv77ya6aaW6aG16aKR6YGT77yMUmVib3Ju77+laG9tZV9ydWxl77+leyJmaXJzdEhlYWRlciI6ImNsYXNzIiwidGl0bGUiOiLmgLvku5PlupMiLCJhdXRob3IiOiJSZWJvcm4iLCJ1cmwiOiJoaWtlcjovL2hvbWUiLCJ2ZXJzaW9uIjozMSwiY29sX3R5cGUiOiJpY29uXzIiLCJjbGFzc19uYW1lIjoiIiwiY2xhc3NfdXJsIjoiIiwiYXJlYV9uYW1lIjoiIiwiYXJlYV91cmwiOiIiLCJ5ZWFyX25hbWUiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOlxudmFyIHJlcyA9IHt9O1xudmFyIGQgPSBbXTtcbnZhciBtUnVsZSA9IEpTT04ucGFyc2UoZ2V0UnVsZSgpKTtcbmV2YWwoZ2V0Q3J5cHRvSlMoKSk7XG5cbi8vIOS7k+W6k+mFjee9ruacrOWcsOe8k+WtmOaWh+S7tlxudmFyIHNldHRpbmdzQ2FjaGVGaWxlID0gXCJoaWtlcjovL2ZpbGVzL2RlcG90X3YyX3NldHRpbmdzLmpzb25cIjtcbi8vIOacrOWcsOe8k+WtmOW8gOWFs1xudmFyIG5lZWRDYWNoZVNldHRpbmcgPSB0cnVlO1xuXG4vLyDku5PlupPkuKrmgKforr7nva5cbnZhciBzZXR0aW5ncyA9IHtcbiAgICAvLyDlnKjov5nph4zmt7vliqDku5PlupPphY3nva7vvIzlj6/kvb/mnKzlnLDmt7vliqDnmoTku5PlupPnva7pobZcbiAgICBhdXRob3JMaXN0OiBbXG4gICAgICAgIFwiW+S+i+WtkF3nva7pobbnp4Hkurrku5PlupNAQFJlYm9ybl8wQEBIaWtlclJ1bGVzUHJpdmFjeUBAYWNjZXNzX3Rva2VuPScqKioqJ1wiLFxuICAgICAgICBcIlvkvovlrZBd6Ieq5a6a5LmJ5paH5Lu25ZCNQEBSZWJvcm5fMEBASGlrZXJSdWxlc0RlcG90QEByZW1vdGVGaWxlbmFtZT0ndXBkYXRlXzEuanNvbidcIlxuICAgIF0sXG4gICAgcmVtb3RlQXV0aG9yTGlzdFVybDogXCJodHRwczovL2dpdGVlLmNvbS9xaXVzdW5zaGluZTIzMy9oaWtlclZpZXcvcmF3L21hc3Rlci9ydWxldmVyc2lvbi9hdXRob3JMaXN0Lmpzb25cIixcbiAgICAvLyDlnKjov5nph4zmt7vliqDku5PlupPphY3nva7vvIzlj6/kvb/mnKzlnLDmt7vliqDnmoTku5PlupPnva7lupVcbiAgICBhdXRob3JMaXN0Qm90dG9tOiBbXG4gICAgICAgIFwiW+S+i+WtkF3nva7lupXmnKzlnLDku5PlupNAQFJlYm9ybl8wQEBIaWtlclJ1bGVzUHJpdmFjeVwiXG4gICAgXSxcbiAgICAvLyDlnKjov5nph4zmt7vliqDpmo/mnLrlpLTlg49cbiAgICBwaWNVcmxMaXN0OiBbXG4gICAgICAgIFwiaHR0cHM6Ly93d3cuZWFzeWljb24ubmV0L2FwaS9yZXNpemVBcGkucGhwP2lkPTEyNzE2MjQmc2l6ZT0xMjhcIixcbiAgICAgICAgXCJodHRwczovL3d3dy5lYXN5aWNvbi5uZXQvYXBpL3Jlc2l6ZUFwaS5waHA/aWQ9MTI3MTY0NyZzaXplPTEyOFwiLFxuICAgICAgICBcImh0dHBzOi8vd3d3LmVhc3lpY29uLm5ldC9hcGkvcmVzaXplQXBpLnBocD9pZD0xMjY2NTM2JnNpemU9MTI4XCIsXG4gICAgICAgIFwiaHR0cHM6Ly93d3cuZWFzeWljb24ubmV0L2FwaS9yZXNpemVBcGkucGhwP2lkPTEyNzE2NTUmc2l6ZT0xMjhcIixcbiAgICBdLFxuICAgIC8vIOmakOiXj+W8gOWFs++8jOS4jemcgOimgemakOiXj+ivt+iuvue9ruS4umZhbHNlXG4gICAgbmVlZEhpZGVSdWxlOiB0cnVlLFxuICAgIC8vIOiHquihjOa3u+WKoOimgemakOiXj+eahOagh+iusO+8jOagvOW8j+S4uu+8mltcIlvmoIforrDlkI0xXVwi77yMXCJb5qCH6K6w5ZCNMl1cIi4uLl1cbiAgICBoaWRlU3ltYm9sczogW1wiW+aooeadv11cIiwgXCJb5pyq5a6M5oiQXVwiXSxcbiAgICAvLyDmgLvku5PlupPmm7TmlrDlnLDlnYBcbiAgICByZW1vdGVEZXBvdFJ1bGVVcmw6IFwiaHR0cHM6Ly9naXRlZS5jb20vcWl1c3Vuc2hpbmUyMzMvaGlrZXJWaWV3L3Jhdy9tYXN0ZXIvcnVsZXZlcnNpb24vZGVwb3RSdWxlX3YyX3JlbGVhc2UuanNvblwiLFxufTtcbi8vIOiLpeS4jeaYr+esrOS4gOasoeS9v+eUqOaAu+S7k+W6k+WImemakOiXj+W8gOWPkeaWh+aho1xudmFyIGRlcG90U3RhdHVzID0ge1xuICAgIC8vIOatpOWkhOaJgOaciemFjee9rumDveS8muiiq+S4i+aWueimhueblu+8jOivt+enu+atpeS4i+aWuemFjee9riBkZXBvdFN0YXR1cy54eHggPSB4eHg7XG59O1xudmFyIGRlcG90U2V0dGluZ3MgPSB7XG59O1xudmFyIHN0YXR1c0NhY2hlRmlsZSA9ICBcImhpa2VyOi8vZmlsZXMvXCIgKyBtUnVsZS50aXRsZSArIFwiX1wiICsgbVJ1bGUuYXV0aG9yICsgXCIuanNvblwiO1xuLy8g5LuT5bqT54q25oCB57yT5a2Y5paH5Lu25Zyw5Z2AXG52YXIgc3RhdHVzQ2FjaGVGaWxlID0gc3RhdHVzQ2FjaGVGaWxlICE9IG51bGwgJiYgc3RhdHVzQ2FjaGVGaWxlICE9IFwiXCIgPyBzdGF0dXNDYWNoZUZpbGUgOiBcImhpa2VyOi8vZmlsZXMvXCIgKyBtUnVsZS50aXRsZSArIFwiX1wiICsgbVJ1bGUuYXV0aG9yICsgXCIuanNvblwiO1xuLy8g5Li+5L6LIGhpa2VyOi8vZmlsZXMvZGVwb3RTdGF0dXNfdjIuanNvblxucHV0VmFyKHtrZXk6ICdzdGF0dXNDYWNoZUZpbGUnLCB2YWx1ZTogc3RhdHVzQ2FjaGVGaWxlfSk7XG5cbnZhciBkZXBvdFN0YXR1c0ZpbGUgPSBmZXRjaChzdGF0dXNDYWNoZUZpbGUsIHt9KTtcbmlmIChkZXBvdFN0YXR1c0ZpbGUgIT0gXCJcIikge1xuICAgIGV2YWwoXCJkZXBvdFN0YXR1cz1cIiArIGRlcG90U3RhdHVzRmlsZSk7XG59XG4vLyDku5PlupPphY3nva7ov5znqIvlnLDlnYDvvIzor7foh6rooYzphY3nva5cbi8vIOS4vuS+i++8mmh0dHBzOi8vZ2l0ZWUuY29tL1JlYm9ybl8wL0hpa2VyUnVsZXNEZXBvdC9yYXcvbWFzdGVyL2RlcG90X3YyX3NldHRpbmdzLmpzb25cbmRlcG90U3RhdHVzLnNldHRpbmdzUmVtb3RlRmlsZSA9IFwiXCI7XG5cbi8vIOiLpemcgOimgeawuOS5heaYvuekuuW8gOWPkeaWh+aho++8jOWImeWPlua2iOazqOmHilxuLy8gZGVwb3RTdGF0dXMuc2hvd0RldkRvYyA9IHRydWU7XG4vLyDoi6XpnIDopoHmsLjkuYXmmL7npLrmj5DnpLrvvIzliJnlj5bmtojms6jph4pcbi8vIGRlcG90U3RhdHVzLnNob3dUaXBzID0gdHJ1ZTtcbi8vIOiLpemcgOimgeawuOS5heaYvuekuuS+i+WtkO+8jOWImeWPlua2iOazqOmHilxuLy8gZGVwb3RTdGF0dXMuc2hvd0V0YyA9IHRydWU7XG5cbmZ1bmN0aW9uIHdyaXRlT2JqZWN0VG9GaWxlKGZpbGVVcmwsIG9iamVjdCkge1xuICAgIHdyaXRlRmlsZShmaWxlVXJsLCBKU09OLnN0cmluZ2lmeShvYmplY3QpKTtcbn1cblxuLy8g5oqK5oC75LuT5bqT54q25oCB5YaZ5YWl5paH5Lu2XG5mdW5jdGlvbiB3cml0ZURlcG90U3RhdHVzVG9GaWxlKGRlcG90U3RhdHVzKSB7XG4gICAgd3JpdGVPYmplY3RUb0ZpbGUoc3RhdHVzQ2FjaGVGaWxlLCBkZXBvdFN0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlU2V0dGluZ3NUb0ZpbGUoc2V0dGluZ3MpIHtcbiAgICBkZXBvdFNldHRpbmdzLmZpbmRfcnVsZV9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHdyaXRlT2JqZWN0VG9GaWxlKHNldHRpbmdzQ2FjaGVGaWxlLCBkZXBvdFNldHRpbmdzKTtcbn1cblxuLy8g5ZCI5bm25a+56LGhXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBvYmogaW4gc291cmNlKSB7XG4gICAgICAgIHRhcmdldFtvYmpdID0gc291cmNlW29ial07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGdldFNldHRpbmdzQ29udGVudChzZXR0aW5nc0ZpbGVVcmwsIGlzUmVtb3RlKSB7XG4gICAgaWYgKHNldHRpbmdzRmlsZVVybCA9PSBcIlwiKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHNldHRpbmdzQ2FjaGVGaWxlQ29udGVudCA9IGZldGNoKHNldHRpbmdzRmlsZVVybCwge30pO1xuICAgIGlmIChzZXR0aW5nc0NhY2hlRmlsZUNvbnRlbnQgIT0gbnVsbCAmJiBzZXR0aW5nc0NhY2hlRmlsZUNvbnRlbnQgIT0gXCJcIikge1xuICAgICAgICBldmFsKFwidmFyIHNldHRpbmdzVGVtcD1cIiArIHNldHRpbmdzQ2FjaGVGaWxlQ29udGVudCk7XG4gICAgICAgIGlmIChzZXR0aW5nc1RlbXAuZmluZF9ydWxlX3NldHRpbmdzICE9IG51bGwgJiYgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3NUZW1wLmZpbmRfcnVsZV9zZXR0aW5ncykgIT0gXCJ7fVwiKSB7XG4gICAgICAgICAgICBkZXBvdFNldHRpbmdzID0gc2V0dGluZ3NUZW1wO1xuICAgICAgICAgICAgZXh0ZW5kKHNldHRpbmdzLCBzZXR0aW5nc1RlbXAuZmluZF9ydWxlX3NldHRpbmdzKTtcbiAgICAgICAgICAgIGlmIChpc1JlbW90ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzTUQ1Tm93ID0gQ3J5cHRvSlMuTUQ1KEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCk7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzTUQ1Tm93ICE9IGRlcG90U3RhdHVzLmNhY2hlRmluZFJ1bGVTZXR0aW5nc01ENSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBvdFN0YXR1cy5jYWNoZUZpbmRSdWxlU2V0dGluZ3NNRDUgPSBzZXR0aW5nc01ENU5vdztcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVEZXBvdFN0YXR1c1RvRmlsZShkZXBvdFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlU2V0dGluZ3NUb0ZpbGUoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIOWFiOivu+acrOWcsOWGjeivu+i/nOeoi++8jOi/nOeoi+eCuOS6hueUqOacrOWcsO+8jOacrOWcsOeCuOS6hueUqOm7mOiupO+8m+acrOWcsOe8k+WtmOi/nOeoi+aXtuWFiOavlOWvuW1kNeS4jeS4gOiHtOWGjee8k+WtmFxuaWYgKG5lZWRDYWNoZVNldHRpbmcgPT0gdHJ1ZSkgZ2V0U2V0dGluZ3NDb250ZW50KHNldHRpbmdzQ2FjaGVGaWxlLCBmYWxzZSk7XG5nZXRTZXR0aW5nc0NvbnRlbnQoZGVwb3RTdGF0dXMuc2V0dGluZ3NSZW1vdGVGaWxlLCB0cnVlKTtcblxudmFyIHJlbW90ZUF1dGhvckxpc3QgPSBbXTtcbnRyeSB7XG4gICAgZXZhbChcInJlbW90ZUF1dGhvckxpc3Q9XCIgKyBmZXRjaChzZXR0aW5ncy5yZW1vdGVBdXRob3JMaXN0VXJsLCB7fSkpO1xufSBjYXRjaCAoZSkge1xufVxuQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoc2V0dGluZ3MuYXV0aG9yTGlzdCwgcmVtb3RlQXV0aG9yTGlzdCk7XG5pZiAoc2V0dGluZ3MuYXV0aG9yTGlzdEJvdHRvbS5sZW5ndGggIT0gMCkgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoc2V0dGluZ3MuYXV0aG9yTGlzdCwgc2V0dGluZ3MuYXV0aG9yTGlzdEJvdHRvbSk7XG5cbmZ1bmN0aW9uIGlzSGlkZVJ1bGUocnVsZVRpdGxlKSB7XG4gICAgaWYgKHNldHRpbmdzLm5lZWRIaWRlUnVsZSAhPSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gaWYgKGhpZGVTeW1ib2xzLmxlbmd0aCA9PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHJ1bGVUZW1wID0gcnVsZVRpdGxlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGluZ3MuaGlkZVN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJ1bGVUZW1wLmluZGV4T2Yoc2V0dGluZ3MuaGlkZVN5bWJvbHNbaV0pICE9IC0xKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5kLnB1c2goe1xuICAgIHRpdGxlOiBcIuasoui/juadpeWIsOinhueVjOaAu+S7k+W6k1wiLFxuICAgIGRlc2M6IFwi5Zyo6L+Z6YeM77yM5L2g5Y+v5Lul55WF5ri45ZCE5Liq5aSn5L2s55qE6KeE5YiZ77yM5b+r6YCf5rWP6KeI5b+r6YCf5a+85YWlXCIsXG4gICAgY29sX3R5cGU6IFwidGV4dF9jZW50ZXJfMVwiXG59KTtcblxuaWYgKGRlcG90U3RhdHVzLnNob3dUaXBzICE9IGZhbHNlKSB7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwi6aaW5qyh5a+85YWl5o+Q56S6XFxu4oCY4oCYKOS7heaYvuS4gOasoSnigJnigJlcIixcbiAgICAgICAgZGVzYzogXCLigJjigJjkuIvmi4nliLfmlrDljbPlj6/mmL7npLrku5PlupPigJnigJlcIiArIFwiXFxu6KeE5YiZ6YeM5pyJ5aW95aSa6ZqQ6JeP55qE5byA5YWz5ZOm77yBXCIgKyBcIlxcbuKAmOKAmOaPkOS+m+eahOS+i+WtkOS5n+S7heaYvuS4gOasoeKAmeKAmVwiLFxuICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCJcbiAgICB9KTtcbiAgICBkZXBvdFN0YXR1cy5zaG93VGlwcyA9IGZhbHNlO1xuICAgIHdyaXRlRGVwb3RTdGF0dXNUb0ZpbGUoZGVwb3RTdGF0dXMpO1xufSBlbHNlIHtcblxuICAgIGlmIChkZXBvdFN0YXR1cy5zaG93RXRjICE9IGZhbHNlIHx8IG1SdWxlLnZlcnNpb24gIT0gZGVwb3RTdGF0dXMudmVyc2lvbikge1xuICAgICAgICBkZXBvdFN0YXR1cy5zaG93RXRjID0gZmFsc2U7XG4gICAgICAgIGRlcG90U3RhdHVzLnZlcnNpb24gPSBtUnVsZS52ZXJzaW9uO1xuICAgICAgICB3cml0ZURlcG90U3RhdHVzVG9GaWxlKGRlcG90U3RhdHVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXR0aW5ncy5oaWRlU3ltYm9scy5wdXNoKFwiW+S+i+WtkF1cIik7XG4gICAgfVxuXG4gICAgaWYgKGRlcG90U3RhdHVzLnNob3dEZXZEb2MgIT0gZmFsc2UgfHwgbVJ1bGUudmVyc2lvbiAhPSBkZXBvdFN0YXR1cy52ZXJzaW9uKSB7XG4gICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogXCLjgJDlpKfkvazpgJrpgZPjgJFcXG7igJjigJgo5LuF5pi+5LiA5qyhKeKAmeKAmVwiLFxuICAgICAgICAgICAgZGVzYzogXCLigJjigJjngrnlh7vmn6XnnItWMuaAu+S7k+W6k+W8gOWPkeaWh+aho+KAmeKAmVxcbuinhOWImemHjOacieawuOS5heaYvuekuuW8gOWFs+WPr+S7peiHquW3seWOu+W8gFwiLFxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vZ2l0ZWUuY29tL1JlYm9ybl8wL0hpa2VyUnVsZXNEZXBvdC9ibG9iL21hc3Rlci9SRUFETUUubWQjZG9jdW1lbnQ9aHR0cHM6Ly9naXRlZS5jb20vUmVib3JuXzAvSGlrZXJSdWxlc0RlcG90L2Jsb2IvbWFzdGVyL1JFQURNRS5tZFwiLFxuICAgICAgICAgICAgY29sX3R5cGU6IFwidGV4dF9jZW50ZXJfMVwiXG4gICAgICAgIH0pO1xuICAgICAgICBkZXBvdFN0YXR1cy5zaG93RGV2RG9jID0gZmFsc2U7XG4gICAgICAgIHdyaXRlRGVwb3RTdGF0dXNUb0ZpbGUoZGVwb3RTdGF0dXMpO1xuICAgIH1cblxuICAgIHZhciBkZXNjID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUub2xkVmVyc2lvbiAhPSBudWxsICYmIHJ1bGUub2xkVmVyc2lvbiA8IHJ1bGUudmVyc2lvbiA/IChcIuKAmOKAmOacieaWsOeJiOacrO+8mlwiICsgcnVsZS52ZXJzaW9uICsgXCLigJnigJnvvIzngrnlh7vlr7zlhaXmlrDniYjmnKxcIikgOiBydWxlLm9sZFZlcnNpb24gPiBydWxlLnZlcnNpb24gPyBcIuKAmOKAmOWWte+8n+S4uuWVpeS9oOeahOinhOWImeeJiOacrOavlOaIkei/mOmrmO+8n+KAmeKAmVwiIDogXCLlvZPliY3op4TliJnlt7LmmK/mnIDmlrDniYjvvIzngrnlh7vot7PliLDop4TliJnpobVcIjtcbiAgICB9O1xuXG4gICAgLy8g5Li65omA5pyJ5YiG57G75re75Yqg5oC75LuT5bqT6aG5XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlbW90ZURlcG90UnVsZSA9IHt9O1xuICAgICAgICBldmFsKFwicmVtb3RlRGVwb3RSdWxlPVwiICsgZmV0Y2goc2V0dGluZ3MucmVtb3RlRGVwb3RSdWxlVXJsLCB7fSkpO1xuICAgICAgICB2YXIgbG9jYWxEZXBvdFJ1bGUgPSBKU09OLnBhcnNlKGdldFJ1bGUoKSk7XG4gICAgICAgIHJlbW90ZURlcG90UnVsZS5vbGRWZXJzaW9uID0gbG9jYWxEZXBvdFJ1bGUudmVyc2lvbjtcbiAgICAgICAgLy9zZXRFcnJvcihKU09OLnN0cmluZ2lmeShsb2NhbERlcG90UnVsZSkpO1xuICAgICAgICAvL3NldEVycm9yKEpTT04uc3RyaW5naWZ5KHJlbW90ZURlcG90UnVsZSkpO1xuICAgICAgICBpZiAocmVtb3RlRGVwb3RSdWxlLm9sZFZlcnNpb24gPCByZW1vdGVEZXBvdFJ1bGUudmVyc2lvbikge1xuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVtb3RlRGVwb3RSdWxlLnRpdGxlICsgXCJcXHRcIiArIGRlc2MocmVtb3RlRGVwb3RSdWxlKSxcbiAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9iYWlkdS5jb20jXCIgKyBKU09OLnN0cmluZ2lmeShyZW1vdGVEZXBvdFJ1bGUpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFwidGV4dF9jZW50ZXJfMVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwi44CQ5pu05paw5pel5b+X44CRXFxu5pu05aSa5a6M5pW05pel5b+X6K+35Zyo6YeM6Z2i54K55Ye76L+b5YWl5Y6f572R6aG15p+l55yLXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZFswXS5kZXNjID0gXCLigJjigJjngrnlh7vlj6/mn6XnnIvmm7TmlrDml6Xlv5figJnigJk8YnI+XCIgKyBkWzBdLmRlc2M7XG4gICAgICAgICAgICBkWzBdLnVybCA9IFwiaHR0cHM6Ly9naXRlZS5jb20vcWl1c3Vuc2hpbmUyMzMvaGlrZXJWaWV3L2Jsb2IvbWFzdGVyL3J1bGV2ZXJzaW9uL0NIQU5HRUxPR19ERVBPVFJVTEVfVjIubWQjdXBkYXRlVGV4dD1cIiArIHJlbW90ZURlcG90UnVsZS51cGRhdGVUZXh0XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogXCLigJjigJjmgLvku5PlupPmm7TmlrDnqIvluo/lt7LmjZ/lnY/igJnigJlcIixcbiAgICAgICAgICAgIGRlc2M6IFwi6K+36IGU57O7IFwiICsgbVJ1bGUuYXV0aG9yICsgXCIg5L+u5aSNXCIsXG4gICAgICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGluZ3MuYXV0aG9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXNIaWRlUnVsZShzZXR0aW5ncy5hdXRob3JMaXN0W2ldKSkge1xuICAgICAgICAgICAgc2V0dGluZ3MuYXV0aG9yTGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGljVXJsID0gbnVsbDtcbiAgICAgICAgdmFyIHBpY1VybEpTID0gc2V0dGluZ3MuYXV0aG9yTGlzdFtpXS5tYXRjaCgvcGljVXJsPS5bXFxzXFxTXSo/Jy8pICsgXCI7XCI7XG4gICAgICAgIGV2YWwocGljVXJsSlMpO1xuICAgICAgICBpZiAocGljVXJsID09IG51bGwpIHBpY1VybCA9IHNldHRpbmdzLnBpY1VybExpc3RbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2V0dGluZ3MucGljVXJsTGlzdC5sZW5ndGgpXTtcbiAgICAgICAgLy8gc2V0RXJyb3IocGljVXJsKVxuICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgdGl0bGU6IHNldHRpbmdzLmF1dGhvckxpc3RbaV0uc3BsaXQoXCJAQFwiKVswXSxcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2JhaWR1LmNvbSNcIiArIHNldHRpbmdzLmF1dGhvckxpc3RbaV0sXG4gICAgICAgICAgICBwaWNfdXJsOiBwaWNVcmxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeShkKSk7XG5yZXMuZGF0YSA9IGQ7XG5zZXRIb21lUmVzdWx0KHJlcyk7Iiwic2VhcmNoX3VybCI6IiIsInRpdGxlQ29sb3IiOiIjZmZmMjBjMDAiLCJncm91cCI6IiPvuI/ig6PpppbpobUiLCJzZWFyY2hGaW5kIjoiIiwiZGV0YWlsX2NvbF90eXBlIjoidGV4dF8xIiwiZGV0YWlsX2ZpbmRfcnVsZSI6ImpzOlxudmFyIHJlcyA9IHt9O1xudmFyIGQgPSBbXTtcbmV2YWwoZ2V0Q3J5cHRvSlMoKSk7XG5cbi8vIOS7k+W6k+mFjee9ruacrOWcsOe8k+WtmOaWh+S7tlxudmFyIHNldHRpbmdzQ2FjaGVGaWxlID0gXCJoaWtlcjovL2ZpbGVzL2RlcG90X3YyX3NldHRpbmdzLmpzb25cIjtcbi8vIOacrOWcsOe8k+WtmOW8gOWFs1xudmFyIG5lZWRDYWNoZVNldHRpbmcgPSB0cnVlO1xuXG4vLyDku5PlupPkuKrmgKforr7nva5cbnZhciBzZXR0aW5ncyA9IHtcbiAgICAvLyDorr7nva4gdHJ1ZSDkuIDplK7lh4DljJbvvIzpmaTkuobop4TliJnlkozku5PlupPpgJrnn6XvvIzllaXkuZ/kuI3opoFcbiAgICBoaWRlQWxsOiBmYWxzZSxcbiAgICAvLyDlsI/ku5PlupPmoIfpopjlvIDlhbPvvIjms6jmhI/kuovpobnkuIrpnaLpgqPkuKrvvInvvIzkuI3pnIDopoHmmL7npLror7forr7nva7kuLp0cnVlXG4gICAgbm9UaXRsZTogdHJ1ZSxcbiAgICAvLyDms6jmhI/kuovpobnlvIDlhbPvvIzkuI3pnIDopoHmmL7npLror7forr7nva7kuLp0cnVlXG4gICAgbm9XYXJuaW5nOiBmYWxzZSxcbiAgICAvLyDop4TliJnmlbDph4/mmL7npLrlvIDlhbPvvIzkuI3pnIDopoHmmL7npLror7forr7nva7kuLp0cnVlXG4gICAgbm9SdWxlc051bTogZmFsc2UsXG4gICAgLy8g5piv5ZCm5YWB6K646LaF6L+H5LiA5a6a6KeE5YiZ5pWw5ZCO5pS55Y+Y5pi+56S65qC35byP77yM6buY6K6k5LiN5byA5ZCvXG4gICAgbmVlZENoYW5nZVNob3dUeXBlOiBmYWxzZSxcbiAgICAvLyDorr7nva7mnIDlpKfmmL7npLrlrozmlbTmlofmnKznmoTop4TliJnmlbDvvIzlpKfkuo7orr7nva7lgLzliJnmmL7npLrkuLrmjInpkq7moLflvI8o6buY6K6kIHRleHRfMilcbiAgICBzaG93RnVsbFRleHRNYXg6IDEwLFxuICAgIC8vIOiuvue9rui2hei/h+WFgeiuuOaYvuekuuWujOaVtOaWh+acrOeahOinhOWImeaVsOWQjuaYvuekuueahOagt+W8j1xuICAgIG92ZXJNYXhTaG93VHlwZTogXCJ0ZXh0XzJcIixcbiAgICAvKipcbiAgICAgKiDop4TliJnmmKDlsITliJfooahcbiAgICAgKiDlt6bmnKzlnLDvvIzlj7Pov5znq6/vvIzmnKzlnLDmmKDlsITkuLrov5znq6/vvIzovr7liLDmm7/mjaLlhoXlrrnnmoTnm67nmoRcbiAgICAgKiDpnIDopoHlhajlkI3ljLnphY3pnIDopoHlnKjmmKDlsITooajkuK3liqDlhaV7IFwibWF0Y2hBbGxcIjogdHJ1ZSB9XG4gICAgICog77yI5rOo5oSP77yM56iL5bqP6YC76L6R5Li65YWI5pig5bCE5ZCO5omn6KGM5LiL6Z2i55qE5Yig6Zmk5qCH6K6w77yJXG4gICAgICovXG4gICAgcnVsZXNNYXBwaW5nOiBbXG4gICAgICAgIC8vIFt7XCJ0aXRsZVwiOiBcIuWXqOWThuWSqlwiLCBcImF1dGhvclwiOiBcIlJlYm9yblwifSwge1widGl0bGVcIjogXCLll6jlk5rlkqrlvbHop4ZcIiwgXCJhdXRob3JcIjogXCJSZWJvcm5cIn0sIHtcIm1hdGNoQWxsXCI6IHRydWV9XSxcbiAgICAgICAgLy8gW3tcInRpdGxlXCI6IFwi6aKE5ZGK54mHXCIsIFwiYXV0aG9yXCI6IFwiUmVib3JuXCJ9LCB7XCJ0aXRsZVwiOiBcIumihOWRiueJhyg/PeKAolJlKVwiLCBcImF1dGhvclwiOiBcIlJlYm9yblwifV0sXG4gICAgICAgIC8vIFt7XCJ0aXRsZVwiOiBcIumihOWRiueJh+KAolRcIiwgXCJhdXRob3JcIjogXCJSZWJvcm5cIn0sIHtcInRpdGxlXCI6IFwi6aKE5ZGK54mH4oCiUmVcIiwgXCJhdXRob3JcIjogXCJSZWJvcm5cIn1dLFxuICAgICAgICAvLyBbe1widGl0bGVcIjogXCIuKj8oPz3igKJUKVwiLCBcImF1dGhvclwiOiBcIlJlYm9yblwifSwge1widGl0bGVcIjogXCIuKj8oPz3igKJSZSlcIiwgXCJhdXRob3JcIjogXCJSZWJvcm5cIn1dLFxuICAgICAgICAvLyBbe1widGl0bGVcIjogXCIuKj8oPz3igKJCKVwiLCBcImF1dGhvclwiOiBcIlJlYm9yblwifSwge1widGl0bGVcIjogXCIuKj8oPz3igKJSZSlcIiwgXCJhdXRob3JcIjogXCJSZWJvcm5cIn1dXG4gICAgXSxcbiAgICAvLyDkupHnq6/op4TliJnmmKDlsITliJfooajpk77mjqXvvIzlhoXlrrnmoLzlvI/mmK9KU09O5pWw57uE77yM6K+36Ieq5bex6K6+572uXG4gICAgcmVtb3RlUnVsZXNNYXBwaW5nVXJsOiBcIlwiLFxuICAgIC8vIOWFpeaIj+W8gOWFs++8n++8iOa7keeove+8iS8vIOWIoOmZpOW8gOWFs++8jOS4jemcgOimgeWIoOmZpOivt+iuvue9ruS4umZhbHNlXG4gICAgbmVlZERlbFN5bWJvbDogdHJ1ZSxcbiAgICAvLyDoh6rooYzmt7vliqDopoHooqvliKDmjonnmoTmoIforrBcbiAgICBzeW1ib2xzOiBbXCLmoIforrAxXCIsIFwi5qCH6K6wMlwiXSxcbiAgICAvLyDpmpDol4/lvIDlhbPvvIzkuI3pnIDopoHpmpDol4/or7forr7nva7kuLpmYWxzZVxuICAgIG5lZWRIaWRlUnVsZTogdHJ1ZSxcbiAgICAvLyDoh6rooYzmt7vliqDopoHpmpDol4/nmoTmoIforrDvvIzmoLzlvI/kuLrvvJpb5qCH6K6w5ZCNXVxuICAgIGhpZGVTeW1ib2xzOiBbXCJb5qih5p2/XVwiLCBcIlvmnKrlrozmiJBdXCJdLFxuICAgIC8vIOaYr+WQpumakOiXj+S+i+WtkO+8jOmcgOimgemakOiXj+ivt+iuvue9ruS4unRydWVcbiAgICBuZWVkSGlkZUV0YzogZmFsc2UsXG5cbiAgICAvLyDoi6XpnIDopoHlhbPpl63lv73nlaXmnKzmrKHmm7TmlrDor7forr7nva7kuLp0cnVlXG4gICAgbm9JZ25vcmVVcGRhdGU6IGZhbHNlLFxuICAgIC8vIOacrOWcsOW/veeVpeabtOaWsOWIl+ihqO+8jFxuICAgIC8vIOWGheWuueaooeadv+S4uiB7dGl0bGU6IFwi6KeE5YiZ5ZCNXCIsIGF1dGhvcjogXCLop4TliJnkvZzogIVcIn1cbiAgICBpZ25vcmVVcGRhdGVSdWxlTGlzdDogW1xuICAgICAgICAvLyB7dGl0bGU6IFwi6aKE5ZGK54mH4oCiUmVcIiwgYXV0aG9yOiBcIlJlYm9yblwifSxcbiAgICBdLFxuICAgIC8vIOS6keerr+W/veeVpeabtOaWsOWIl+ihqOmTvuaOpe+8jOagvOW8j+aYr0pTT07mlbDnu4TvvIzor7foh6rlt7Horr7nva5cbiAgICByZW1vdGVJZ25vcmVMaXN0VXJsOiBcIlwiLFxuICAgIC8vIOWPguiAg+mTvuaOpe+8mlxuICAgIC8vIGh0dHBzOi8vZ2l0ZWUuY29tL1JlYm9ybl8wL0hpa2VyUnVsZXNEZXBvdC9yYXcvbWFzdGVyL2lnbm9yZVVwZGF0ZVJ1bGVMaXN0Lmpzb25cbiAgICAvLyBodHRwczovL2dpdGVlLmNvbS9xaXVzdW5zaGluZTIzMy9oaWtlclZpZXcvcmF3L21hc3Rlci9ydWxldmVyc2lvbi9SZWJvcm4vaWdub3JlVXBkYXRlUnVsZUxpc3QuanNvblxufTtcbi8vIOazqOaEj+S6i+mhueaWh+Wtl1xudmFyIHdhcmluZ1RleHQgPSBcIjEuIOS/neWtmOWQjumcgOimgeaJi+WKqOS4i+aLieWIt+aWsOaJjeiDveabtOaWsOinhOWImeeKtuaAgVwiICsgXCJcXG4yLiDmjInpkq7lvaLnirbnmoTop4TliJnmmK/lpITkuo7mnIDmlrDniYjmnKznmoTvvIzngrnlh7vlj6/ot7Povazoh7Pop4TliJnpobVcIjtcbi8vIOmmluasoeWvvOWFpeaWh+Wtl1xudmFyIGZpcnN0SW1wb3J0VGV4dCA9IFwiMS7igJjigJjkuIvmi4nliLfmlrDljbPlj6/mmL7npLrku5PlupPop4TliJnigJnigJlcIiArIFwiXFxuMi7kuoznuqfop4TliJnkuK0gbmVlZENoYW5nZVNob3dUeXBlIOWPr+iuvue9ruaYvuekuuagt+W8j1wiICsgXCJcXG4zLuS6jOe6p+inhOWImeS4rSBoaWRlQWxsIOWPr+iuvue9ruS4gOmUrumakOiXj+agh+mimOWSjOazqOaEj+S6i+mhuVwiO1xudmFyIHN0YXR1c0NhY2hlRmlsZSA9IGdldFZhcignc3RhdHVzQ2FjaGVGaWxlJyk7XG4vLyDoi6XkuI3mmK/nrKzkuIDmrKHkvb/nlKjmgLvku5PlupPliJnlrZjlgqjku5PlupPnirbmgIFcbnZhciBkZXBvdFN0YXR1cyA9IHtcbiAgICAvLyDmraTlpITmiYDmnInphY3nva7pg73kvJrooqvkuIvmlrnopobnm5bvvIzor7fnp7vmraXkuIvmlrnphY3nva4gZGVwb3RTdGF0dXMueHh4ID0geHh4O1xufTtcbnZhciBkZXBvdFNldHRpbmdzID0ge307XG5cbmlmIChzZXR0aW5ncy5uZWVkSGlkZUV0YyA9PSB0cnVlKSBzZXR0aW5ncy5oaWRlU3ltYm9scy5wdXNoKFwiW+S+i+WtkF1cIik7XG5cbi8vIOS7k+W6k+eKtuaAgee8k+WtmOaWh+S7tuWcsOWdgFxuaWYgKHN0YXR1c0NhY2hlRmlsZSA9PSBudWxsIHx8IHN0YXR1c0NhY2hlRmlsZSA9PSBcIlwiKSBzdGF0dXNDYWNoZUZpbGUgPSBcImhpa2VyOi8vZmlsZXMvZGVwb3RTdGF0dXNfdjIuanNvblwiO1xuLy8g5Li+5L6LIGhpa2VyOi8vZmlsZXMvZGVwb3RTdGF0dXNfdjIuanNvblxuXG52YXIgZGVwb3RTdGF0dXNGaWxlID0gZmV0Y2goc3RhdHVzQ2FjaGVGaWxlLCB7fSk7XG5pZiAoZGVwb3RTdGF0dXNGaWxlICE9IFwiXCIpIHtcbiAgICBldmFsKFwiZGVwb3RTdGF0dXM9XCIgKyBkZXBvdFN0YXR1c0ZpbGUpO1xufVxuXG4vLyDku5PlupPphY3nva7ov5znqIvlnLDlnYDvvIzor7foh6rooYzphY3nva5cbi8vIOS4vuS+i++8mmh0dHBzOi8vZ2l0ZWUuY29tL1JlYm9ybl8wL0hpa2VyUnVsZXNEZXBvdC9yYXcvbWFzdGVyL2RlcG90X3YyX3NldHRpbmdzLmpzb25cbmRlcG90U3RhdHVzLnNldHRpbmdzUmVtb3RlRmlsZSA9IFwiXCI7XG5cbi8vIOiLpemcgOimgeawuOS5heaYvuekuuaPkOekuu+8jOWImeWPlua2iOazqOmHilxuLy8gZGVwb3RTdGF0dXMuc2hvd1NlY29uZExpc3RUaXBzID0gdHJ1ZTtcblxuZnVuY3Rpb24gd3JpdGVPYmplY3RUb0ZpbGUoZmlsZVVybCwgb2JqZWN0KSB7XG4gICAgd3JpdGVGaWxlKGZpbGVVcmwsIEpTT04uc3RyaW5naWZ5KG9iamVjdCkpO1xufVxuXG4vLyDmiormgLvku5PlupPnirbmgIHlhpnlhaXmlofku7ZcbmZ1bmN0aW9uIHdyaXRlRGVwb3RTdGF0dXNUb0ZpbGUoZGVwb3RTdGF0dXMpIHtcbiAgICB3cml0ZU9iamVjdFRvRmlsZShzdGF0dXNDYWNoZUZpbGUsIGRlcG90U3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVTZXR0aW5nc1RvRmlsZShzZXR0aW5ncykge1xuICAgIGRlcG90U2V0dGluZ3MuZGV0YWlsX2ZpbmRfcnVsZV9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHdyaXRlT2JqZWN0VG9GaWxlKHNldHRpbmdzQ2FjaGVGaWxlLCBkZXBvdFNldHRpbmdzKTtcbn1cblxuLy8g5ZCI5bm25a+56LGhXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBvYmogaW4gc291cmNlKSB7XG4gICAgICAgIHRhcmdldFtvYmpdID0gc291cmNlW29ial07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGdldFNldHRpbmdzQ29udGVudChzZXR0aW5nc0ZpbGVVcmwsIGlzUmVtb3RlKSB7XG4gICAgaWYgKHNldHRpbmdzRmlsZVVybCA9PSBcIlwiKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHNldHRpbmdzQ2FjaGVGaWxlQ29udGVudCA9IGZldGNoKHNldHRpbmdzRmlsZVVybCwge30pO1xuICAgIGlmIChzZXR0aW5nc0NhY2hlRmlsZUNvbnRlbnQgIT0gbnVsbCAmJiBzZXR0aW5nc0NhY2hlRmlsZUNvbnRlbnQgIT0gXCJcIikge1xuICAgICAgICBldmFsKFwidmFyIHNldHRpbmdzVGVtcD1cIiArIHNldHRpbmdzQ2FjaGVGaWxlQ29udGVudCk7XG4gICAgICAgIGlmIChzZXR0aW5nc1RlbXAuZGV0YWlsX2ZpbmRfcnVsZV9zZXR0aW5ncyAhPSBudWxsICYmIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzVGVtcC5kZXRhaWxfZmluZF9ydWxlX3NldHRpbmdzKSAhPSBcInt9XCIpIHtcbiAgICAgICAgICAgIGRlcG90U2V0dGluZ3MgPSBzZXR0aW5nc1RlbXA7XG4gICAgICAgICAgICBleHRlbmQoc2V0dGluZ3MsIHNldHRpbmdzVGVtcC5kZXRhaWxfZmluZF9ydWxlX3NldHRpbmdzKTtcbiAgICAgICAgICAgIGlmIChpc1JlbW90ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzTUQ1Tm93ID0gQ3J5cHRvSlMuTUQ1KEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCk7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzTUQ1Tm93ICE9IGRlcG90U3RhdHVzLmNhY2hlRGV0YWlsRmluZFJ1bGVTZXR0aW5nc01ENSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBvdFN0YXR1cy5jYWNoZURldGFpbEZpbmRSdWxlU2V0dGluZ3NNRDUgPSBzZXR0aW5nc01ENU5vdztcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVEZXBvdFN0YXR1c1RvRmlsZShkZXBvdFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlU2V0dGluZ3NUb0ZpbGUoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVE9ETyDnm67liY3kvJrlr7zoh7TkuIDml6bku5PlupPphY3nva7nmoTmnKzlnLDnvJPlrZjkuqfnlJ/vvIzliJnml6Dms5Xmm7TmlLnpu5jorqTphY3nva7kuK3lkIzlrZfmrrXlhoXlrrnnmoTpl67pophcbi8vIOm7mOiupOmFjee9ruS4juacrOWcsOe8k+WtmC/kupHnq6/lkIjlubblhoXlrrnnmoTmlrnlvI/vvIzku6XmnKzlnLDnvJPlrZgv5LqR56uv5Li65Li777yI5ZCI5bm25LyY5YWI57qn5Li677ya5LqR56uvLT7mnKzlnLDnvJPlrZgtPum7mOiupOmFjee9ru+8iVxuLy8g5YWI6K+75pys5Zyw5YaN6K+75LqR56uv77yM5LqR56uv54K45LqG55So5pys5Zyw77yM5pys5Zyw54K45LqG55So6buY6K6k77yb5pys5Zyw57yT5a2Y5LqR56uv5pe25YWI5q+U5a+5bWQ15LiN5LiA6Ie05YaN57yT5a2YXG5pZiAobmVlZENhY2hlU2V0dGluZyA9PSB0cnVlKSBnZXRTZXR0aW5nc0NvbnRlbnQoc2V0dGluZ3NDYWNoZUZpbGUsIGZhbHNlKTtcbmdldFNldHRpbmdzQ29udGVudChkZXBvdFN0YXR1cy5zZXR0aW5nc1JlbW90ZUZpbGUsIHRydWUpO1xuXG52YXIgcmVtb3RlSWdub3JlTGlzdCA9IFtdO1xudHJ5IHtcbiAgICBldmFsKFwicmVtb3RlSWdub3JlTGlzdD1cIiArIGZldGNoKHNldHRpbmdzLnJlbW90ZUlnbm9yZUxpc3RVcmwsIHt9KSk7XG59IGNhdGNoIChlKSB7XG59XG5BcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShzZXR0aW5ncy5pZ25vcmVVcGRhdGVSdWxlTGlzdCwgcmVtb3RlSWdub3JlTGlzdCk7XG4vLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeShyZW1vdGVJZ25vcmVMaXN0KSk7XG5cblxudmFyIHJlbW90ZVJ1bGVzTWFwcGluZyA9IFtdO1xudHJ5IHtcbiAgICBldmFsKFwicmVtb3RlUnVsZXNNYXBwaW5nPVwiICsgZmV0Y2goc2V0dGluZ3MucmVtb3RlUnVsZXNNYXBwaW5nVXJsLCB7fSkpO1xufSBjYXRjaCAoZSkge1xufVxuQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoc2V0dGluZ3MucnVsZXNNYXBwaW5nLCByZW1vdGVSdWxlc01hcHBpbmcpO1xuLy8gc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkocnVsZXNNYXBwaW5nKSk7XG5cblxuLyoqXG4gKiDlj6/lnKjmraTlpIToh6rlrprkuYnku5PlupPvvIzlrp7njrDnp4Hkurrku5PlupNcbiAqXG4gKiDku6VSZWJvcm7ku5PlupPnmoTpk77mjqXkuLrlj4LogINcbiAqXG4gKiBodHRwczovL2dpdGVlLmNvbS9SZWJvcm5fMC9IaWtlclJ1bGVzRGVwb3QvYmxvYi9tYXN0ZXIvdXBkYXRlLmpzb25cbiAqL1xudmFyIGF1dGhvckxpc3QgPSBnZXRVcmwoKS5zcGxpdChcIiNcIilbMV07XG52YXIgYXV0aG9yQW5kT3duZXJBbmRQcm9qZWN0ID0gYXV0aG9yTGlzdC5zcGxpdChcIkBAXCIpO1xudmFyIGF1dGhvciA9IGF1dGhvckFuZE93bmVyQW5kUHJvamVjdFswXTtcbnZhciByZW1vdGVVcmwgPSBcIlwiO1xuXG52YXIgYXBpVHlwZSA9IFwiMVwiOyAgLy8gMCDkuLrmlofku7bnm7Tpk77vvIwxIOS4uueggeS6kUFQSVxudmFyIGFwaVR5cGVKUyA9IGF1dGhvckxpc3QubWF0Y2goL2FwaVR5cGU9LltcXHNcXFNdKj8nLykgKyBcIjtcIjtcbmV2YWwoYXBpVHlwZUpTKTtcbmlmIChhcGlUeXBlID09IG51bGwpIGFwaVR5cGUgPSBcIjFcIjtcblxuaWYgKGFwaVR5cGUgPT0gXCIwXCIpIHtcbiAgICB2YXIgZnVsbFVybCA9IFwiXCI7XG4gICAgdmFyIGZ1bGxVcmxKUyA9IGF1dGhvckxpc3QubWF0Y2goL2Z1bGxVcmw9LltcXHNcXFNdKj8nLykgKyBcIjtcIjtcbiAgICBldmFsKGZ1bGxVcmxKUyk7XG4gICAgcmVtb3RlVXJsID0gZnVsbFVybDtcbn0gZWxzZSBpZiAoYXBpVHlwZSA9PSBcIjFcIikge1xuICAgIHZhciByZW1vdGVBcGlIb21lID0gXCJodHRwczovL2dpdGVlLmNvbS9hcGkvdjUvcmVwb3MvXCI7XG4gICAgdmFyIG93bmVyID0gYXV0aG9yQW5kT3duZXJBbmRQcm9qZWN0WzFdOyAgIC8vIOS7k+W6k+aLpeacieiAhVxuICAgIHZhciByZXBvID0gYXV0aG9yQW5kT3duZXJBbmRQcm9qZWN0WzJdOyAvLyDku5PlupPlkI1cbiAgICB2YXIgcmVtb3RlRmlsZW5hbWUgPSBudWxsOyAvLyDmlofku7blkI1cbiAgICB2YXIgcGF0aCA9IHJlbW90ZUZpbGVuYW1lOyAgLy8g5Zyo5LuT5bqT5Lit5paH5Lu255qE6Lev5b6EXG4gICAgdmFyIGFjY2Vzc190b2tlbiA9IG51bGw7ICAvLyDnlKjmiLfmjojmnYPnoIHvvIzlnKjnoIHkupFcIuiuvue9ruKAlD7lronlhajorr7lrpotPuS4quS6uuiuv+mXruS7pOeJjFwi5Lit5Y+v5Lul55Sf5oiQXG4gICAgdmFyIHRva2VuSlMgPSBhdXRob3JMaXN0Lm1hdGNoKC9hY2Nlc3NfdG9rZW49LltcXHNcXFNdKj8nLykgKyBcIjtcIjtcbiAgICBldmFsKHRva2VuSlMpO1xuICAgIC8vIHNldEVycm9yKGFjY2Vzc190b2tlbj09bnVsbCk7XG4gICAgdmFyIHJlbW90ZUZpbGVuYW1lSlMgPSBhdXRob3JMaXN0Lm1hdGNoKC9yZW1vdGVGaWxlbmFtZT0uW1xcc1xcU10qPycvKSArIFwiO1wiO1xuICAgIGV2YWwocmVtb3RlRmlsZW5hbWVKUyk7XG4gICAgaWYgKHJlbW90ZUZpbGVuYW1lID09IG51bGwpIHtcbiAgICB9XG4gICAgcmVtb3RlRmlsZW5hbWUgPSBcInVwZGF0ZS5qc29uXCI7XG4gICAgcGF0aCA9IHJlbW90ZUZpbGVuYW1lO1xuICAgIC8vIHNldEVycm9yKHJlbW90ZUZpbGVuYW1lKVxuICAgIC8vIEFQSemTvuaOpeWPguiAg++8mmh0dHBzOi8vZ2l0ZWUuY29tL2FwaS92NS9yZXBvcy97e293bmVyfX0ve3tyZXBvfX0vY29udGVudHMve3twYXRofX0/YWNjZXNzX3Rva2VuPSoqKipcbiAgICByZW1vdGVVcmwgPSByZW1vdGVBcGlIb21lICsgb3duZXIgKyBcIi9cIiArIHJlcG8gKyBcIi9jb250ZW50cy9cIiArIHBhdGg7XG4gICAgaWYgKGFjY2Vzc190b2tlbiAhPSBudWxsKSB7XG4gICAgICAgIHJlbW90ZVVybCA9IHJlbW90ZVVybCArIFwiP2FjY2Vzc190b2tlbj1cIiArIGFjY2Vzc190b2tlbjtcbiAgICB9XG4gICAgLy8gc2V0RXJyb3IocmVtb3RlVXJsKTtcbiAgICAvLyB2YXIgcmVtb3RlSG9tZSA9IFwiaHR0cHM6Ly9naXRlZS5jb20vXCIgKyBvd25lciArIFwiL1wiICsgcmVwbyArIFwiL2Jsb2IvbWFzdGVyL3VwZGF0ZS5qc29uXCI7XG59XG5cbmlmIChnZXRVcmwoKS5pbmRleE9mKFwicnVsZTovL1wiKSAhPSAtMSkge1xuICAgIHZhciByZW1vdGVEZXBvdFJ1bGUgPSBKU09OLnBhcnNlKGdldFVybCgpLnNwbGl0KFwiI1wiKVsxXSk7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwi5pu05paw5pel5b+XICjngrnlh7vlj6/mn6XnnIvlrozmlbTml6Xlv5cpXCIsXG4gICAgICAgIGRlc2M6IHJlbW90ZURlcG90UnVsZS51cGRhdGVUZXh0LFxuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9naXRlZS5jb20vcWl1c3Vuc2hpbmUyMzMvaGlrZXJWaWV3L2Jsb2IvbWFzdGVyL3J1bGV2ZXJzaW9uL0NIQU5HRUxPR19ERVBPVFJVTEVfVjIubWRcIixcbiAgICAgICAgY29sX3R5cGU6IFwicGljXzFcIlxuICAgIH0pO1xuICAgIGQucHVzaCh7XG4gICAgICAgIHRpdGxlOiBcIueCueWHu+abtOaWsOaAu+S7k+W6k1wiLFxuICAgICAgICB1cmw6IHJlbW90ZURlcG90UnVsZS5ydWxlLFxuICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCJcbiAgICB9KTtcbn0gZWxzZSBpZiAoZ2V0VXJsKCkuaW5kZXhPZihcInVwZGF0ZVRleHQ9XCIpICE9IC0xKSB7XG4gICAgdmFyIHVwZGF0ZVRleHQgPSBudWxsO1xuICAgIC8vIHVwZGF0ZVRleHRKUyA9IFwidXBkYXRlVGV4dD0nXCIgKyBnZXRVcmwoKS5zcGxpdChcIiNcIilbMV0ucmVwbGFjZShcInVwZGF0ZVRleHQ9XCIsIFwiXCIpICsgXCInO1wiO1xuICAgIC8vIGV2YWwodXBkYXRlVGV4dEpTKTtcbiAgICB1cGRhdGVUZXh0ID0gZ2V0VXJsKCkuc3BsaXQoXCIjXCIpWzFdLnJlcGxhY2UoXCJ1cGRhdGVUZXh0PVwiLCBcIlwiKTtcbiAgICBkLnB1c2goe1xuICAgICAgICB0aXRsZTogXCLmm7TmlrDml6Xlv5cgKOeCueWHu+WPr+afpeeci+WujOaVtOaXpeW/lylcIixcbiAgICAgICAgZGVzYzogdXBkYXRlVGV4dCAhPSBudWxsID8gdXBkYXRlVGV4dCA6IFwi5pqC5peg5pu05paw5pel5b+XXCIsXG4gICAgICAgIHVybDogXCJodHRwczovL2dpdGVlLmNvbS9xaXVzdW5zaGluZTIzMy9oaWtlclZpZXcvYmxvYi9tYXN0ZXIvcnVsZXZlcnNpb24vQ0hBTkdFTE9HX0RFUE9UUlVMRV9WMi5tZFwiLFxuICAgICAgICBjb2xfdHlwZTogXCJwaWNfMVwiXG4gICAgfSk7XG59IGVsc2UgaWYgKGdldFVybCgpLmluZGV4T2YoXCJkb2N1bWVudD1cIikgIT0gLTEpIHtcbiAgICB2YXIgZG9jdW1lbnRVcmwgPSBudWxsO1xuICAgIGRvY3VtZW50VXJsID0gZ2V0VXJsKCkuc3BsaXQoXCIjXCIpWzFdLnJlcGxhY2UoXCJkb2N1bWVudD1cIiwgXCJcIik7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwi5oC75LuT5bqT5byA5Y+R5paH5qGj5YWl5Y+jXCIsXG4gICAgICAgIGRlc2M6IFwi6L+Z5piv5LiT6Zeo57uZ5aSn5L2s5Lus5YaZ55qE77yM5paH56yU5aSq5beu5LqG77yM6KeJ5b6X5YaZ5b6X5Lmx6L+Y6K+35L2T6LCF5LiA5LiL8J+ZiOOAguacieS4jeaHgueahOWcsOaWueWPr+S7peiBlOezu+aIke+8jOa6nOS6hua6nOS6hu+9nlwiLFxuICAgICAgICB1cmw6IGRvY3VtZW50VXJsLFxuICAgICAgICBjb2xfdHlwZTogXCJwaWNfMVwiXG4gICAgfSk7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwi54K55Ye75Y+v5p+l55yL5a6M5pW05paH5qGjXCIsXG4gICAgICAgIHVybDogZG9jdW1lbnRVcmwsXG4gICAgICAgIGNvbF90eXBlOiBcInRleHRfY2VudGVyXzFcIlxuICAgIH0pO1xufSBlbHNlIHtcblxuICAgIHZhciBkZXBvdFJ1bGVzU3RhdHVzID0ge1xuICAgICAgICB1cGRhdGVOdW06IDAsXG4gICAgICAgIG5vSW1wb3J0TnVtOiAwLFxuICAgICAgICBpZ25vcmVOdW06IDAsXG4gICAgICAgIHVua25vd25UeXBlTnVtOiAwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFJ1bGVOb1N5bWJvbHMocnVsZSwgc3ltYm9sTGlzdCkge1xuICAgICAgICBpZiAoc2V0dGluZ3MubmVlZERlbFN5bWJvbCAhPSB0cnVlKSByZXR1cm4gcnVsZTtcbiAgICAgICAgdmFyIHJ1bGVUZW1wID0gcnVsZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3ltYm9sUmVnID0gbmV3IFJlZ0V4cChzeW1ib2xMaXN0W2ldLCBcImdcIik7XG4gICAgICAgICAgICBydWxlVGVtcC50aXRsZSA9IHJ1bGVUZW1wLnRpdGxlLnJlcGxhY2Uoc3ltYm9sUmVnLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvL3NldEVycm9yKEpTT04uc3RyaW5naWZ5KHJ1bGVUZW1wKSk7XG4gICAgICAgIHJldHVybiBydWxlVGVtcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0hpZGVSdWxlKHJ1bGUpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzLm5lZWRIaWRlUnVsZSAhPSB0cnVlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIGlmIChoaWRlU3ltYm9scy5sZW5ndGggPT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgcnVsZVRlbXAgPSBydWxlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLmhpZGVTeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocnVsZVRlbXAudGl0bGUuaW5kZXhPZihzZXR0aW5ncy5oaWRlU3ltYm9sc1tpXSkgIT0gLTEpIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDlpoLmnpzmnKzlnLDmsqHmnInliJnmj5DnpLrlr7zlhaXmlrDop4TliJlcbiAgICAvLyDlm6Dpg6jliIbmiYvmnLrkuI3mlK/mjIFlczbor63ms5XvvIzmlYXms6jph4rmjolcbiAgICAvKnZhciBteVJ1bGVzTWFwID0gbmV3IE1hcCgpO1xuICAgIG15UnVsZXMubWFwKHJ1bGUgPT4ge1xuICAgICAgICBteVJ1bGVzTWFwLnNldChydWxlLnRpdGxlLCB0cnVlKTtcbiAgICB9KTtcbiAgICAvL3NldEVycm9yKG15UnVsZXNNYXAuZ2V0KFwi6IW+6K6v4oCiUmVcIikpOyovXG5cbiAgICBmdW5jdGlvbiBnZXRSdWxlSW5BcnJheShydWxlcywgcnVsZSkge1xuICAgICAgICBpZiAocnVsZXMgPT0gbnVsbCB8fCBydWxlcy5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChydWxlc1tpXS50aXRsZSA9PSBydWxlLnRpdGxlICYmIHJ1bGVzW2ldLmF1dGhvciA9PSBhdXRob3IpIHJldHVybiBydWxlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyDljp/lp4vmlrnms5XvvIzmr5TovoPogJfml7ZcbiAgICBmdW5jdGlvbiBpc0luQXJyYXkocnVsZXMsIHJ1bGUpIHtcbiAgICAgICAgaWYgKGdldFJ1bGVJbkFycmF5KHJ1bGVzLCBydWxlKSAhPSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJZ25vcmVVcGRhdGVSdWxlKHJ1bGUpIHtcbiAgICAgICAgaWYgKGlzSW5BcnJheShzZXR0aW5ncy5pZ25vcmVVcGRhdGVSdWxlTGlzdCwgcnVsZSkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlSWdub3JlUnVsZSA9IGdldFJ1bGVJbkFycmF5KGRlcG90U3RhdHVzLmlnbm9yZVVwZGF0ZVJ1bGVMaXN0LCBydWxlKTtcbiAgICAgICAgICAgIGlmIChjYWNoZUlnbm9yZVJ1bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChkZXBvdFN0YXR1cy5pZ25vcmVVcGRhdGVSdWxlTGlzdCA9PSBudWxsKSBkZXBvdFN0YXR1cy5pZ25vcmVVcGRhdGVSdWxlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGNhY2hlSWdub3JlUnVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHJ1bGUudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjogYXV0aG9yLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBydWxlLnZlcnNpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRlcG90U3RhdHVzLmlnbm9yZVVwZGF0ZVJ1bGVMaXN0LnB1c2goY2FjaGVJZ25vcmVSdWxlKTtcbiAgICAgICAgICAgICAgICB3cml0ZURlcG90U3RhdHVzVG9GaWxlKGRlcG90U3RhdHVzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocnVsZS52ZXJzaW9uICE9IGNhY2hlSWdub3JlUnVsZS52ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlSWdub3JlUnVsZS52ZXJzaW9uID0gcnVsZS52ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZURlcG90U3RhdHVzVG9GaWxlKGRlcG90U3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0SWdub3JlVXBkYXRlUnVsZShydWxlKSB7XG4gICAgICAgIGlmIChpc0lnbm9yZVVwZGF0ZVJ1bGUocnVsZSkgPT0gdHJ1ZSkgcnVsZS5pc0lnbm9yZVVwZGF0ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVzID0gW107XG4gICAgZXZhbChcInJ1bGVzPVwiICsgZmV0Y2goXCJoaWtlcjovL2hvbWVcIiwge30pKTtcbiAgICB2YXIgbXlSdWxlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXTtcbiAgICAgICAgaWYgKHJ1bGUuYXV0aG9yID09IGF1dGhvcikge1xuICAgICAgICAgICAgbXlSdWxlcy5wdXNoKGdldFJ1bGVOb1N5bWJvbHMocnVsZSwgc2V0dGluZ3Muc3ltYm9scykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkobXlSdWxlcykpO1xuXG4gICAgZnVuY3Rpb24gZ2V0UnVsZUluUnVsZXNXaXRoTWFwcGluZyhydWxlcywgcnVsZSkge1xuICAgICAgICBpZiAocnVsZXMgPT0gbnVsbCB8fCBydWxlcy5sZW5ndGggPT0gMCB8fCBydWxlID09IG51bGwgfHwgcnVsZS5tYXBwaW5nVGl0bGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChydWxlc1tpXS5tYXBwaW5nVGl0bGUgIT0gbnVsbCAmJiBydWxlc1tpXS5tYXBwaW5nVGl0bGUgPT0gcnVsZS5tYXBwaW5nVGl0bGUgJiYgcnVsZXNbaV0uYXV0aG9yID09IGF1dGhvcikgcmV0dXJuIHJ1bGVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW5SdWxlc1dpdGhNYXBwaW5nKHJ1bGVzLCBydWxlKSB7XG4gICAgICAgIGlmIChnZXRSdWxlSW5SdWxlc1dpdGhNYXBwaW5nKHJ1bGVzLCBydWxlKSAhPSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSBmdW5jdGlvbiAocnVsZXMsIHJ1bGUpIHtcbiAgICAgICAgaWYgKHJ1bGUgIT0gbnVsbCAmJiBydWxlLnZlcnNpb24gPCAwKSB7XG4gICAgICAgICAgICBkZXBvdFJ1bGVzU3RhdHVzLnVua25vd25UeXBlTnVtICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gXCLku5PlupPml6Dms5Xmo4DmtYvor6Xop4TliJnnsbvlnovvvIzor7figJjigJjnnIvop4TliJnmm7TmlrDml7bpl7TigJnigJlcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJblJ1bGVzV2l0aE1hcHBpbmcocnVsZXMsIHJ1bGUpID09IHRydWUgfHwgaXNJbkFycmF5KHJ1bGVzLCBydWxlKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAocnVsZS5vbGRWZXJzaW9uICE9IG51bGwgJiYgcnVsZS5vbGRWZXJzaW9uIDwgcnVsZS52ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgZGVwb3RSdWxlc1N0YXR1cy51cGRhdGVOdW0gKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFwi4oCY4oCY5pyJ5paw54mI5pys77yaXCIgKyBydWxlLnZlcnNpb24gKyBcIuKAmeKAme+8jOeCueWHu+WvvOWFpeaWsOeJiOacrFwiKVxuICAgICAgICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGJyPjxicj5b5pu05paw5pel5b+XXSBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS51cGRhdGVUZXh0ID09IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIuaXoFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcnVsZS51cGRhdGVUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnRpcHMgIT0gbnVsbCAmJiBydWxlLnRpcHMgIT0gXCJcIiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPGJyPjxicj5UaXBzOiBcIiArIHJ1bGUudGlwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5vbGRWZXJzaW9uID4gcnVsZS52ZXJzaW9uID9cbiAgICAgICAgICAgICAgICAgICAgXCLigJjigJjllrXvvJ/kuLrllaXkvaDnmoTop4TliJnniYjmnKzmr5TmiJHov5jpq5jvvJ/igJnigJlcIlxuICAgICAgICAgICAgICAgICAgICA6IFwi5b2T5YmN6KeE5YiZ5bey5piv5pyA5paw54mI77yM54K55Ye76Lez5Yiw6KeE5YiZ6aG1XCJcbiAgICAgICAgICAgICAgICAgICAgKyAoXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLnRpcHMgIT0gbnVsbCAmJiBydWxlLnRpcHMgIT0gXCJcIiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG5cXG5UaXBzOiBcIiArIHJ1bGUudGlwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVwb3RSdWxlc1N0YXR1cy5ub0ltcG9ydE51bSArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFwi4oCY4oCY5L2g5bCa5pyq5a+85YWl6K+l6KeE5YiZ4oCZ4oCZ77yM54K55Ye75a+85YWlXCJcbiAgICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgICAgcnVsZS50aXBzICE9IG51bGwgJiYgcnVsZS50aXBzICE9IFwiXCIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgXCI8YnI+PGJyPlRpcHM6IFwiICsgcnVsZS50aXBzIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChkZXBvdFN0YXR1cy5zaG93U2Vjb25kTGlzdFRpcHMgIT0gZmFsc2UpIHtcbiAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlOiBcIummluasoeWvvOWFpeaPkOekulxcbuKAmOKAmCjku4XmmL7kuIDmrKEp4oCZ4oCZXCIsXG4gICAgICAgICAgICBkZXNjOiBmaXJzdEltcG9ydFRleHQsXG4gICAgICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGRlcG90U3RhdHVzLnNob3dTZWNvbmRMaXN0VGlwcyA9IGZhbHNlO1xuICAgICAgICB3cml0ZURlcG90U3RhdHVzVG9GaWxlKGRlcG90U3RhdHVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0dGluZ3Mubm9UaXRsZSAhPSB0cnVlICYmIHNldHRpbmdzLmhpZGVBbGwgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCLigJjigJjov5nph4zmmK8gXCIgKyBhdXRob3IgKyBcIiDnmoTop4TliJnlsI/ku5PlupPigJnigJlcIixcbiAgICAgICAgICAgICAgICAvLyBkZXNjOiBcIueCueWHu+WPr+iuv+mXruinhOWImeS7k+W6k+a6kFwiLFxuICAgICAgICAgICAgICAgIC8vIHVybDogcmVtb3RlSG9tZSxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0XzFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVtb3RlUnVsZXMgPSBbXTtcbiAgICAgICAgLy8gdmFyIHJlbW90ZVVybCA9IHJlbW90ZUFwaUhvbWUgKyBlbmNvZGVVUklDb21wb25lbnQoYXV0aG9yKSArIFwiL1wiICsgcmVtb3RlRmlsZW5hbWU7XG4gICAgICAgIHZhciByZW1vdGVTb3VyY2UgPSBmZXRjaChyZW1vdGVVcmwsIHt9KTtcbiAgICAgICAgLy8gc2V0RXJyb3IocmVtb3RlVXJsKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV2YWwoXCJyZW1vdGVTb3VyY2U9XCIgKyByZW1vdGVTb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGFwaVR5cGUgPT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICByZW1vdGVSdWxlcyA9IHJlbW90ZVNvdXJjZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBpVHlwZSA9PSBcIjFcIikge1xuICAgICAgICAgICAgICAgIGV2YWwoXCJyZW1vdGVSdWxlcz1cIiArIGJhc2U2NERlY29kZShyZW1vdGVTb3VyY2UuY29udGVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlbW90ZVJ1bGVzLmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBub3RpY2UgPSByZW1vdGVSdWxlcy5ub3RpY2U7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG5vdGljZSkgPT0gXCJzdHJpbmdcIiAmJiBub3RpY2UgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLku5PlupPpgJrnn6VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBub3RpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFwicGljXzFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChub3RpY2UpID09IFwib2JqZWN0XCIgJiYgbm90aWNlLmRlc2MgIT0gbnVsbCAmJiBub3RpY2UuZGVzYyAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBub3RpY2UudGl0bGUgIT0gbnVsbCAmJiBub3RpY2UudGl0bGUgIT0gXCJcIiA/IG5vdGljZS50aXRsZSA6IFwi5LuT5bqT6YCa55+lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogbm90aWNlLmRlc2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogbm90aWNlLnBpY1VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXCJwaWNfMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdGVSdWxlcyA9IHJlbW90ZVJ1bGVzLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3Mubm9XYXJuaW5nICE9IHRydWUgJiYgc2V0dGluZ3MuaGlkZUFsbCAhPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi5rOo5oSP5LqL6aG5XCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHdhcmluZ1RleHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInBpY18xXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCJoaWtlcjovL2hvbWVA5oC75LuT5bqTXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgICAgIC8vc2V0RXJyb3IocmVtb3RlUnVsZXMubGVuZ3RoKTtcbiAgICAgICAgaWYgKHJlbW90ZVJ1bGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIuivpei/nOeoi+S7k+W6k+aXoOaVsOaNru+8gVwiLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInRleHRfY2VudGVyXzFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIuivpei/nOeoi+S7k+W6k+aXoOaVsOaNru+8gVwiLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInRleHRfY2VudGVyXzFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIuivpei/nOeoi+S7k+W6k+aXoOaVsOaNru+8gVwiLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInRleHRfY2VudGVyXzFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3NldEVycm9yKG15UnVsZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGlmIChteVJ1bGVzLmxlbmd0aCA+PSByZW1vdGVSdWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyDkuI3nn6XpgZPkvJrkuI3kvJrmnInpl67pophcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG15UnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZW1vdGVSdWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsUnVsZSA9IG15UnVsZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3RlUnVsZSA9IHJlbW90ZVJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGlkZVJ1bGUocmVtb3RlUnVsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlcy5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SWdub3JlVXBkYXRlUnVsZShyZW1vdGVSdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc2V0dGluZ3MucnVsZXNNYXBwaW5nLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoKGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgIT0gbnVsbCAmJiByZW1vdGVSdWxlLm1hcHBpbmdUaXRsZSAhPSBudWxsKSB8fCByZW1vdGVSdWxlLmlzTWFwcGVkID09IHRydWUpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZU1hcHBpbmcgPSBzZXR0aW5ncy5ydWxlc01hcHBpbmdba107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbFJ1bGVNYXBwaW5nVGl0bGUgPSBydWxlTWFwcGluZ1swXS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW90ZVJ1bGVNYXBwaW5nVGl0bGUgPSBydWxlTWFwcGluZ1sxXS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsUnVsZS50aXRsZSA9PSBsb2NhbFJ1bGVNYXBwaW5nVGl0bGUgJiYgcmVtb3RlUnVsZS50aXRsZSA9PSByZW1vdGVSdWxlTWFwcGluZ1RpdGxlICYmIHJ1bGVNYXBwaW5nWzJdLm1hdGNoQWxsID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgPSByZW1vdGVSdWxlTWFwcGluZ1RpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUnVsZS5tYXBwaW5nVGl0bGUgPSByZW1vdGVSdWxlTWFwcGluZ1RpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlUmVnZXggPSBuZXcgUmVnRXhwKGxvY2FsUnVsZU1hcHBpbmdUaXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFJ1bGUubWFwcGluZ1RpdGxlID0gbG9jYWxSdWxlLm1hcHBpbmdUaXRsZSAhPSBudWxsICYmIGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgIT0gXCJcIiA/IGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgOiBsb2NhbFJ1bGUudGl0bGUubWF0Y2godGl0bGVSZWdleClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZVJlZ2V4ID0gbmV3IFJlZ0V4cChyZW1vdGVSdWxlTWFwcGluZ1RpdGxlLCBcImdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlLm1hcHBpbmdUaXRsZSA9IHJlbW90ZVJ1bGUudGl0bGUubWF0Y2godGl0bGVSZWdleClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgPT0gcmVtb3RlUnVsZS5tYXBwaW5nVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVJ1bGUubG9jYWxUaXRsZSA9IGxvY2FsUnVsZS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVJ1bGUuaXNNYXBwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUnVsZS5vbGRWZXJzaW9uID0gbG9jYWxSdWxlLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxSdWxlLnRpdGxlID09IHJlbW90ZVJ1bGUudGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlLm9sZFZlcnNpb24gPSBsb2NhbFJ1bGUudmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW90ZVJ1bGVzW2pdLnJ1bGU9bXlSdWxlc1tpXS5ydWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3RlUnVsZXNbal0uZGVzYz1teVJ1bGVzW2ldLmRlc2M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVSdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3RlUnVsZSA9IHJlbW90ZVJ1bGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlzSGlkZVJ1bGUocmVtb3RlUnVsZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRJZ25vcmVVcGRhdGVSdWxlKHJlbW90ZVJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15UnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbFJ1bGUgPSBteVJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBzZXR0aW5ncy5ydWxlc01hcHBpbmcubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmICgobG9jYWxSdWxlLm1hcHBpbmdUaXRsZSAhPSBudWxsICYmIHJlbW90ZVJ1bGUubWFwcGluZ1RpdGxlICE9IG51bGwpIHx8IHJlbW90ZVJ1bGUuaXNNYXBwZWQgPT0gdHJ1ZSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlTWFwcGluZyA9IHNldHRpbmdzLnJ1bGVzTWFwcGluZ1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsUnVsZU1hcHBpbmdUaXRsZSA9IHJ1bGVNYXBwaW5nWzBdLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3RlUnVsZU1hcHBpbmdUaXRsZSA9IHJ1bGVNYXBwaW5nWzFdLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxSdWxlLnRpdGxlID09IGxvY2FsUnVsZU1hcHBpbmdUaXRsZSAmJiByZW1vdGVSdWxlLnRpdGxlID09IHJlbW90ZVJ1bGVNYXBwaW5nVGl0bGUgJiYgcnVsZU1hcHBpbmdbMl0ubWF0Y2hBbGwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxSdWxlLm1hcHBpbmdUaXRsZSA9IHJlbW90ZVJ1bGVNYXBwaW5nVGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlLm1hcHBpbmdUaXRsZSA9IHJlbW90ZVJ1bGVNYXBwaW5nVGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVSZWdleCA9IG5ldyBSZWdFeHAobG9jYWxSdWxlTWFwcGluZ1RpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsUnVsZS5tYXBwaW5nVGl0bGUgPSBsb2NhbFJ1bGUubWFwcGluZ1RpdGxlICE9IG51bGwgJiYgbG9jYWxSdWxlLm1hcHBpbmdUaXRsZSAhPSBcIlwiID8gbG9jYWxSdWxlLm1hcHBpbmdUaXRsZSA6IGxvY2FsUnVsZS50aXRsZS5tYXRjaCh0aXRsZVJlZ2V4KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlUmVnZXggPSBuZXcgUmVnRXhwKHJlbW90ZVJ1bGVNYXBwaW5nVGl0bGUsIFwiZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVJ1bGUubWFwcGluZ1RpdGxlID0gcmVtb3RlUnVsZS50aXRsZS5tYXRjaCh0aXRsZVJlZ2V4KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxSdWxlLm1hcHBpbmdUaXRsZSA9PSByZW1vdGVSdWxlLm1hcHBpbmdUaXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUnVsZS5sb2NhbFRpdGxlID0gbG9jYWxSdWxlLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUnVsZS5pc01hcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVSdWxlLm9sZFZlcnNpb24gPSBsb2NhbFJ1bGUudmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsUnVsZS50aXRsZSA9PSByZW1vdGVSdWxlLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUnVsZS5vbGRWZXJzaW9uID0gbG9jYWxSdWxlLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdGVSdWxlc1tpXS5ydWxlPW15UnVsZXNbal0ucnVsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW90ZVJ1bGVzW2ldLmRlc2M9bXlSdWxlc1tqXS5kZXNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1lcmdlU29ydChhcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAobGVuIDwgMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW4gLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGFyci5zbGljZSgwLCBtaWRkbGUpLFxuICAgICAgICAgICAgICAgICAgICByaWdodCA9IGFyci5zbGljZShtaWRkbGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZShtZXJnZVNvcnQobGVmdCksIG1lcmdlU29ydChyaWdodCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBtZXJnZShsZWZ0LCByaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlVXBkYXRlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpc1RoaXNWZXJzaW9uTGlzdCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlZnQubGVuZ3RoID4gMCAmJiByaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0WzBdLmlzSWdub3JlVXBkYXRlID09IHRydWUgJiYgbGVmdFswXS5vbGRWZXJzaW9uICE9IGxlZnRbMF0udmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlVXBkYXRlTGlzdC5wdXNoKGxlZnQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmlnaHRbMF0uaXNJZ25vcmVVcGRhdGUgPT0gdHJ1ZSAmJiByaWdodFswXS5vbGRWZXJzaW9uICE9IHJpZ2h0WzBdLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZVVwZGF0ZUxpc3QucHVzaChyaWdodC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsZWZ0WzBdLm9sZFZlcnNpb24gPCBsZWZ0WzBdLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxlZnQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmlnaHRbMF0ub2xkVmVyc2lvbiA8IHJpZ2h0WzBdLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJpZ2h0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnRbMF0ub2xkVmVyc2lvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChsZWZ0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJpZ2h0WzBdLm9sZFZlcnNpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmlnaHQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RoaXNWZXJzaW9uTGlzdC5wdXNoKGxlZnQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RoaXNWZXJzaW9uTGlzdC5wdXNoKHJpZ2h0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGlnbm9yZVVwZGF0ZUxpc3QubGVuZ3RoKSByZXN1bHQucHVzaChpZ25vcmVVcGRhdGVMaXN0LnNoaWZ0KCkpO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGlzVGhpc1ZlcnNpb25MaXN0Lmxlbmd0aCkgcmVzdWx0LnB1c2goaXNUaGlzVmVyc2lvbkxpc3Quc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAobGVmdC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxlZnQuc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAocmlnaHQubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyaWdodC5zaGlmdCgpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbW90ZVJ1bGVzID0gbWVyZ2VTb3J0KHJlbW90ZVJ1bGVzKTtcblxuICAgICAgICAgICAgdmFyIHNob3dSdWxlTGlzdCA9IFtdO1xuICAgICAgICAgICAgLy8gc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkocmVtb3RlUnVsZXMpKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3RlUnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IHJlbW90ZVJ1bGVzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBydWxlV2l0aE1hcHBpbmcgPSBnZXRSdWxlSW5SdWxlc1dpdGhNYXBwaW5nKHJlbW90ZVJ1bGVzLCBqKTtcbiAgICAgICAgICAgICAgICBpZiAocnVsZVdpdGhNYXBwaW5nICE9IG51bGwgJiYgZ2V0UnVsZUluUnVsZXNXaXRoTWFwcGluZyhteVJ1bGVzLCBqKSkgaiA9IHJ1bGVXaXRoTWFwcGluZztcbiAgICAgICAgICAgICAgICB2YXIgciA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5uZWVkQ2hhbmdlU2hvd1R5cGUgPT0gdHJ1ZSAmJiBqLm9sZFZlcnNpb24gIT0gbnVsbCAmJiBqLm9sZFZlcnNpb24gPj0gai52ZXJzaW9uICYmIHJlbW90ZVJ1bGVzLmxlbmd0aCA+IHNldHRpbmdzLnNob3dGdWxsVGV4dE1heClcbiAgICAgICAgICAgICAgICAgICAgci5jb2xfdHlwZSA9IHNldHRpbmdzLm92ZXJNYXhTaG93VHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoKHNldHRpbmdzLm5vSWdub3JlVXBkYXRlICE9IHRydWUgJiYgai5pc0lnbm9yZVVwZGF0ZSA9PSB0cnVlKSAmJiAoai5vbGRWZXJzaW9uID09IG51bGwgfHwgai5vbGRWZXJzaW9uIDwgai52ZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBvdFJ1bGVzU3RhdHVzLmlnbm9yZU51bSArPSAxO1xuICAgICAgICAgICAgICAgICAgICByLmRlc2MgPSBcIuivpeinhOWImeW3suW/veeVpeacrOasoeabtOaWsFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHIuZGVzYyA9IGRlc2MobXlSdWxlcywgaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIudGl0bGUgPSBqLm1hcHBpbmdUaXRsZSAhPSBudWxsICYmIGoubWFwcGluZ1RpdGxlICE9IFwiXCIgJiYgai5pc01hcHBlZCA9PSB0cnVlID9cbiAgICAgICAgICAgICAgICAgICAgai5tYXBwaW5nVGl0bGVcbiAgICAgICAgICAgICAgICAgICAgOiBqLnRpdGxlO1xuICAgICAgICAgICAgICAgIHIudXJsID0gai52ZXJzaW9uIDwgMCA/XG4gICAgICAgICAgICAgICAgICAgIGoucnVsZSB8fCBcIlwiXG4gICAgICAgICAgICAgICAgICAgIDogaXNJbkFycmF5KG15UnVsZXMsIGopIHx8IGouaXNNYXBwZWQgPT0gdHJ1ZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAoai5vbGRWZXJzaW9uICE9IG51bGwgJiYgai5vbGRWZXJzaW9uIDwgai52ZXJzaW9uID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoai5ydWxlIHx8IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoXCJoaWtlcjovL2hvbWVAXCIgKyAoai5sb2NhbFRpdGxlICE9IG51bGwgJiYgai5sb2NhbFRpdGxlICE9IFwiXCIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLmxvY2FsVGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBqLnRpdGxlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChqLnJ1bGUgfHwgXCJcIik7XG4gICAgICAgICAgICAgICAgLy9yLmNvbnRlbnQgPSBqLnVwZGF0ZVRleHQ7XG4gICAgICAgICAgICAgICAgc2hvd1J1bGVMaXN0LnB1c2gocik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5ub1J1bGVzTnVtICE9IHRydWUgJiYgc2V0dGluZ3MuaGlkZUFsbCAhPSB0cnVlKVxuICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIjxiPuivpeS7k+W6k+WFseaciSDigJjigJhcIiArIHJlbW90ZVJ1bGVzLmxlbmd0aCArIFwi4oCZ4oCZIOadoeinhOWImTxiLz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiAoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCLmm7TmlrA64oCY4oCYXCIgKyBkZXBvdFJ1bGVzU3RhdHVzLnVwZGF0ZU51bVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIuKAmeKAmSAg5pyq5a+85YWlOuKAmOKAmFwiICsgZGVwb3RSdWxlc1N0YXR1cy5ub0ltcG9ydE51bVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIuKAmeKAmSAg5b+955WlOuKAmOKAmFwiICsgZGVwb3RSdWxlc1N0YXR1cy5pZ25vcmVOdW1cbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCLigJnigJkpXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInRleHRfMVwiLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3aGlsZSAoc2hvd1J1bGVMaXN0Lmxlbmd0aCkgZC5wdXNoKHNob3dSdWxlTGlzdC5zaGlmdCgpKVxuXG4gICAgICAgIH1cbiAgICB9XG59XG5yZXMuZGF0YSA9IGQ7XG5zZXRIb21lUmVzdWx0KHJlcyk7Iiwic2RldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJzZGV0YWlsX2ZpbmRfcnVsZSI6IiJ9" 
}