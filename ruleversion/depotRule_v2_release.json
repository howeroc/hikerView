{
    "title": "ÊÄª‰ªìÂ∫ì",
    "author": "Reborn",
    "version": 34,
    "updateText": "1.Êê¨‰∫Ü‰∏Ä‰∏ãÂºÄÂèëÊñáÊ°£ÁöÑ‰ΩçÁΩÆ\n2.üôàÔ∏èÊäÄÁ©∑‰∫ÜÔºåËøôÂèØËÉΩÁúüÁöÑÊòØÊúÄÂêé‰∫ø‰∏™ÁâàÊú¨‰∫Ü\n3.Êõ¥Â§öÊõ¥Êñ∞Êó•ÂøóËØ∑ÁÇπÂáªËÆøÈóÆÊ∫êÁΩëÈ°µÊü•Áúã",
    "rule": "rule:" 
}